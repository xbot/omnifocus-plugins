/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.convert_tasks_to_projects",
    "version": "1.1",
    "description": "Convert selected tasks to projects and move them to the selected folder.",
    "label": "Convert to Projects",
    "shortLabel": "Convert to Projects",
    "paletteLabel": "Convert to Projects",
    "image": "arrowshape.zigzag.right"
}*/
(() => {
    const FIELD_FOLDERS = "Folders";

    const MENU_END_OF_LIBRARY = "library_ending";

    const PREF_LAST_SELECTED_FOLDER = "lastSelectedFolder";

    let preferences = new Preferences();

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            let menuItems = flattenedFolders.map((folder) => {
                let label = folder.name;

                while (folder.parent !== null) {
                    label = folder.parent.name + " > " + label;
                    folder = folder.parent;
                }

                return label;
            });

            let menuKeys = flattenedFolders.map((folder) => {
                return folder.id.primaryKey;
            });

            menuItems.push("Append to the end of library");
            menuKeys.push(MENU_END_OF_LIBRARY);

            let lastSelectedFolderID = preferences.readString(
                PREF_LAST_SELECTED_FOLDER
            );

            let selectedKey = lastSelectedFolderID;
            if (selectedKey === null) {
                selectedKey = menuKeys[0];
            }

            let foldersMenu = new Form.Field.Option(
                FIELD_FOLDERS,
                null,
                menuKeys,
                menuItems,
                selectedKey
            );

            let form = new Form();
            form.addField(foldersMenu);

            let formTitle = "Convert to Projects";
            let buttonLabel = "Convert";

            let formPromise = form.show(formTitle, buttonLabel);

            form.validate = function (formObject) {
                return true;
            };

            formPromise.then((formObject) => {
                let selectedFolderIndex = formObject.values[FIELD_FOLDERS];

                let selectedFolder =
                    selectedFolderIndex === MENU_END_OF_LIBRARY
                        ? library.ending
                        : Folder.byIdentifier(selectedFolderIndex);

                if (selectedFolder === null) {
                    throw {
                        name: "InvalidFolder",
                        message: "Invalid folder selected.",
                    };
                }

                let newProjects = convertTasksToProjects(
                    selection.tasks,
                    selectedFolder
                );

                let itemIDs = newProjects.map((project) => {
                    return project.id.primaryKey;
                });

                let urlString = "omnifocus:///task/" + itemIDs.join(",");

                URL.fromString(urlString).open();

                preferences.write(
                    PREF_LAST_SELECTED_FOLDER,
                    selectedFolderIndex
                );
            });
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        return selection.tasks.length > 0;
    };

    return action;
})();
