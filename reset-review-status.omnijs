/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.reset_review_status",
    "version": "1.0",
    "description": "Reset review status of all projects.",
    "label": "Review Again",
    "shortLabel": "Review Again",
    "paletteLabel": "Review Again",
    "image": "cup.and.saucer"
}*/
(() => {
    const FIELD_FOLDERS = "Folders";

    const MENU_ALL = "all";

    const PREF_LAST_SELECTED_FOLDERS = "lastSelectedFolders";

    let preferences = new Preferences();

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            let menuItems = [];
            let menuKeys = [];

            menuItems.push("All");
            menuKeys.push(MENU_ALL);

            menuItems = menuItems.concat(
                flattenedFolders.map((folder) => {
                    let label = folder.name;

                    while (folder.parent !== null) {
                        label = folder.parent.name + " > " + label;
                        folder = folder.parent;
                    }

                    return label;
                })
            );

            menuKeys = menuKeys.concat(
                flattenedFolders.map((folder) => {
                    return folder.id.primaryKey;
                })
            );

            let lastSelectedFolderIds = preferences.readString(
                PREF_LAST_SELECTED_FOLDERS
            );

            let foldersMenu = new Form.Field.MultipleOptions(
                FIELD_FOLDERS,
                "Folders",
                menuKeys,
                menuItems,
                lastSelectedFolderIds !== null ? lastSelectedFolderIds.split(",") : []
            );

            let form = new Form();
            form.addField(foldersMenu);

            let formTitle = "Choose folders to review";
            let buttonLabel = "Apply";

            let formPromise = form.show(formTitle, buttonLabel);

            form.validate = function (formObject) {
                let selectedFolderIds = formObject.values[FIELD_FOLDERS];
                return selectedFolderIds.length > 0;
            };

            formPromise.then((formObject) => {
                let selectedFolderIds = formObject.values[FIELD_FOLDERS];

                if (selectedFolderIds.includes(MENU_ALL)) {
                    selectedFolderIds = [MENU_ALL];
                }

                selectedFolderIds.forEach((folderId) => {
                    let projects =
                        folderId === MENU_ALL
                            ? flattenedProjects
                            : Folder.byIdentifier(folderId).flattenedProjects;

                    projects.forEach((project) => {
                        project.nextReviewDate = new Date();
                    });
                });

                URL.fromString("omnifocus:///review").open();

                preferences.write(
                    PREF_LAST_SELECTED_FOLDERS,
                    selectedFolderIds.join(",")
                );
            });
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        return true;
    };

    return action;
})();
