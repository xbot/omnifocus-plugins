/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.rearrange_object_timescales",
    "version": "1.0",
    "description": "Rearrange timescales of the selected objects.",
    "label": "Rearrange Timescales",
    "shortLabel": "Rearrange Timescales",
    "paletteLabel": "Rearrange Timescales",
    "image": "digitalcrown.arrow.counterclockwise"
}*/
(() => {
    const FIELD_TIMESCALES = "Timescales";

    const PREF_LAST_SELECTED_TIMESCALE = "lastSelectedTimescale";

    const TIMESCALE_MORNING   = "morning";
    const TIMESCALE_NOON      = "noon";
    const TIMESCALE_AFTERNOON = "afternoon";
    const TIMESCALE_EVENING   = "evening";
    const TIMESCALE_DAYTIME   = "daytime";
    const TIMESCALE_WHOLE_DAY = "whole_day";

    const TIMESCALES = {
        TIMESCALE_MORNING:   { from: "9:00 AM",  to: "12:00 PM" },
        TIMESCALE_NOON:      { from: "12:00 PM", to: "14:00" },
        TIMESCALE_AFTERNOON: { from: "14:00",    to: "18:30" },
        TIMESCALE_EVENING:   { from: "18:30",    to: "23:00" },
        TIMESCALE_DAYTIME:   { from: "9:00 AM",  to: "18:30" },
        TIMESCALE_WHOLE_DAY: { from: "9:00 AM",  to: "23:00" },
    };

    let preferences = new Preferences();

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            let menuItems = [
                "Morning",
                "Noon",
                "Afternoon",
                "Evening",
                "Daytime",
                "Whole Day",
            ];

            menuItems = menuItems.map((item, index) => {
                return item + " (" + Object.values(TIMESCALES)[index].from + " - " + Object.values(TIMESCALES)[index].to + ")";
            });

            let lastSelectedTimescale = preferences.readString(
                PREF_LAST_SELECTED_TIMESCALE
            );

            let selectedKey = lastSelectedTimescale;
            if (selectedKey === null) {
                selectedKey = Object.keys(TIMESCALES)[0];
            }

            let timescaleMenu = new Form.Field.Option(
                FIELD_TIMESCALES,
                null,
                Object.keys(TIMESCALES),
                menuItems,
                selectedKey
            );

            let form = new Form();
            form.addField(timescaleMenu);

            let formTitle   = "Rearrange Timescales";
            let buttonLabel = "Arrange";

            let formPromise = form.show(formTitle, buttonLabel);

            form.validate = function (formObject) {
                return true;
            };

            formPromise.then((formObject) => {
                let selectedTimescale = formObject.values[FIELD_TIMESCALES];

                selection.allObjects.forEach((object) => {
                    if (!(object instanceof Task) && !(object instanceof Project)) {
                        return;
                    }

                    let newDeferDate = new Date(
                        new Date().toDateString() + " " + TIMESCALES[selectedTimescale].from
                    );
                    let newDueDate = new Date(
                        new Date().toDateString() + " " + TIMESCALES[selectedTimescale].to
                    );

                    object.deferDate = newDeferDate;
                    object.dueDate   = newDueDate;
                });

                preferences.write(
                    PREF_LAST_SELECTED_TIMESCALE,
                    selectedTimescale
                );
            });
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        return selection.tasks.length + selection.projects.length > 0;
    };

    return action;
})();
